version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.7.0

commands:
  save_artifacts:
    steps:
      - run:
          name: Copy the artifacts from the image
          when: always
          command: docker cp $(docker ps -a -q --filter "name=e2e-tests" --filter "status=exited"):/src/screenshots ./screenshots
      - run:
          name: Compress the artifacts for easier downloading
          when: always
          command: for file in ./screenshots/*; do tar -czf ${file}.tar.gz $file; done
      - run:
          name: Create the saved_artifacts directory
          when: always
          command: mkdir ./saved_artifacts;
      - run:
          name: Move the gzipped files across
          when: always
          command: mv ./screenshots/*.tar.gz ./saved_artifacts/
      - store_artifacts:
          path: /home/circleci/project/saved_artifacts

  fetch_docker_image:
    parameters:
      image:
        type: string
    steps:
      - run:
          name: Fetch the <<parameters.image>> image
          command: bash scripts/fetch_docker_image.sh <<parameters.image>>

  clear_docker_networks:
    steps:
      - run:
          command: docker network prune -f
          name: Clear out the networks before we start our Docker services

  pre_run_setup:
    steps:
      - attach_workspace:
          at: ~/
      - clear_docker_networks
      - run:
          name: Make a fake user-service image
          command: docker pull hello-world && docker tag hello-world user-service
      - fetch_docker_image:
          image: nginx-auth-proxy

  run_services_and_wait:
    parameters:
      ENABLE_PHASE_2:
        default: "true"
        type: string
    steps:
      - run:
          name: Run docker services (except BeanConnect)
          command: |
            cd ~/bichard7-next
            ENABLE_PHASE_2=<<parameters.ENABLE_PHASE_2>> make run-all-no-bc -j 4
      - fetch_docker_image:
          image: pncemulator
      - fetch_docker_image:
          image: beanconnect
      - run:
          name: Run BeanConnect and PNC Emulator docker services
          command: cd ~/bichard7-next && make run-beanconnect
      - run:
          name: Build E2E tests
          command: cd ~/project && make build
      - run:
          name: Wait for Bichard
          command: bash ~/bichard7-next/scripts/wait_for_bichard.sh 90
      - run:
          name: Retry running Docker services
          command: |
            cd ~/bichard7-next
            make destroy
            ENABLE_PHASE_2=<<parameters.ENABLE_PHASE_2>> make run-all
            bash ~/bichard7-next/scripts/wait_for_bichard.sh 90
          when: on_fail

  pre_run_setup_new_ui:
    steps:
      - attach_workspace:
          at: ~/
      - clear_docker_networks
      - fetch_docker_image:
          image: pncemulator
      - fetch_docker_image:
          image: beanconnect
      - fetch_docker_image:
          image: user-service
      - fetch_docker_image:
          image: nginx-auth-proxy
      - fetch_docker_image:
          image: ui

  run_services_with_new_ui_and_wait:
    parameters:
      ENABLE_PHASE_2:
        default: "true"
        type: string
    steps:
      - run:
          name: Run docker services
          command: |
            cd ~/bichard7-next
            ENABLE_PHASE_2=<<parameters.ENABLE_PHASE_2>> make run-all && make run-ui
      - run:
          name: Build E2E tests
          command: cd ~/project && make build
      - run:
          name: Wait for Bichard
          command: bash ~/bichard7-next/scripts/wait_for_bichard.sh 90
      - run:
          name: Retry running Docker services
          command: |
            cd ~/bichard7-next
            make destroy
            ENABLE_PHASE_2=<<parameters.ENABLE_PHASE_2>> make run-all
            bash ~/bichard7-next/scripts/wait_for_bichard.sh 90
          when: on_fail

  pipe_logs_to_test_container:
    steps:
      - run:
          name: Pipe logs to the test container
          command: cd ~/bichard7-next && bash ./scripts/pipe_logs.sh liberty-next &> /tmp/logpipe.txt
          background: true

  run_test_next_chunk:
    steps:
      - pipe_logs_to_test_container
      - run:
          name: Run E2E tests
          command: |
            cd ~/bichard7-next
            TOTAL_CHUNKS=$CIRCLE_NODE_TOTAL CHUNK_NUMBER=$CIRCLE_NODE_INDEX make e2e-tests-record-chunk

  run_test_new_ui:
    steps:
      - pipe_logs_to_test_container
      - run:
          name: Run E2E tests with next UI
          command: |
            cd ~/bichard7-next && make e2e-tests-new-ui

  checkout-core:
    steps:
      - run:
          name: Git clone Core
          command: git clone --depth 1 https://github.com/ministryofjustice/bichard7-next-core.git ~/bichard7-next-core

  run-core:
    steps:
      - run:
          name: Create a hash of the package lock
          command: md5sum ~/bichard7-next-core/package-lock.json > ~/bichard7-next-core/package-lock.json.md5
      - restore_cache:
          name: Load node_modules from the cache if they haven't changed
          keys:
            - core-deps-{{ checksum "~/bichard7-next-core/package-lock.json.md5" }}
      - run:
          name: NPM install the core repo
          command: cd ~/bichard7-next-core && nvm use v16 && npm i
      - save_cache:
          key: core-deps-{{ checksum "~/bichard7-next-core/package-lock.json.md5" }}
          paths: ~/bichard7-next-core/node_modules
      - run:
          name: Start the test server in the background
          command: nvm use v16 && cd ~/bichard7-next-core && npm run test:server
          background: true
      - run:
          name: Wait for Core
          command: nvm use v16 && npx -y wait-port 6000

  install-tests:
    steps:
      - run:
          name: Create a hash of the package lock
          command: md5sum package-lock.json > package-lock.json.md5
      - restore_cache:
          name: Load node_modules from the cache if they haven't changed
          keys:
            - test-deps-{{ checksum "package-lock.json.md5" }}
      - run:
          name: NPM install the core repo
          command: nvm use v16 && npm i
      - save_cache:
          key: test-deps-{{ checksum "package-lock.json.md5" }}
          paths: node_modules

  test-core:
    steps:
      - install-tests
      - run: nvm use v16 && npm run test:characterisation

  test-bichard:
    steps:
      - install-tests
      - run: nvm use v16 && npm run test:characterisation:bichard

  run-tests-e2e:
    steps:
      - checkout
      - pre_run_setup
      - run_services_and_wait
      - run_test_next_chunk
      - save_artifacts

  run-tests-e2e-new-ui:
    steps:
      - checkout
      - pre_run_setup_new_ui
      - run_services_with_new_ui_and_wait
      - run_test_new_ui
      - save_artifacts

  run-tests-characterisation-bichard:
      steps:
        - checkout
        - pre_run_setup
        - run_services_and_wait:
            ENABLE_PHASE_2: "false"
        - test-bichard

  run-tests-characterisation-core:
    steps:
      - checkout
      - checkout-core
      - run-core
      - test-core

jobs:
  build:
    machine:
      image: ubuntu-2004:2022.07.1
    resource_class: xlarge
    steps:
      - add_ssh_keys:
          fingerprints:
            - 15:7c:72:90:e7:44:01:0e:3d:a3:fc:b5:ca:c0:c2:f3
      - run:
          name: Clone Bichard7 Next
          command: git clone --depth 1 git@github.com:ministryofjustice/bichard7-next.git ~/bichard7-next
      - run:
          name: Build Bichard7 Next
          command: cd ~/bichard7-next && make build-ci
      - persist_to_workspace:
          root: ~/
          paths: bichard7-next

  test-e2e:
    machine:
      image: ubuntu-2004:2022.07.1
      docker_layer_caching: false
    resource_class: large
    environment:
      BICHARD_REDIRECT_URL: https://172.17.0.1:9443/bichard-ui/Authenticate
      WORKSPACE: local-next
      RECORD: "true"
      AUTH_TYPE: bichard-jwt
    steps:
      - run-tests-e2e
    parallelism: 4

  tests-e2e-new-ui:
    machine:
      image: ubuntu-2004:2022.07.1
      docker_layer_caching: false
    resource_class: large
    environment:
      WORKSPACE: local-next
      RECORD: "true"
    steps:
      - run-tests-e2e-new-ui

  test-characterisation-bichard:
    machine:
        image: ubuntu-2004:2022.07.1
        docker_layer_caching: false
    resource_class: large
    environment:
      WORKSPACE: local-next
    steps:
        - run-tests-characterisation-bichard

  test-characterisation-core:
    machine:
        image: ubuntu-2004:2022.07.1
        docker_layer_caching: false
    resource_class: large
    steps:
        - run-tests-characterisation-core

workflows:
  version: 3

  deploy:
    jobs:
      - build
      - test-e2e:
          requires:
            - build
      - tests-e2e-new-ui:
          requires:
            - build
      - test-characterisation-bichard:
          requires:
            - build
      - test-characterisation-core:
          requires:
            - build
